#!/usr/bin/env nu

print "Running init script..."

let SCRIPTS_PATH = $env | get --optional "SCRIPTS_PATH" | default "/scripts"
let SECRETS_PATH = $env | get --optional "SECRETS_PATH" | default "/secrets"
let CONFIG_PATH = $env | get --optional "CONFIG_PATH" | default "/config"

def mk_temp_dir [] {
  let tmp_dir = $"/tmp/nu-temp-(random uuid)"
  mkdir $tmp_dir
  $tmp_dir
}

def fetch_source [config] {
  let credentials = ($config | get --optional credentials)

  let location = $config.location

  let path = $"($SCRIPTS_PATH)/($config.path)"
  mkdir $path

  let tmp_dir = mk_temp_dir

  let parsed = ($location | url parse)
  let query = ($parsed | get --optional query | default "" | from url)
  mut repo = $"($parsed.scheme)://($parsed.host)($parsed.path)"

  if $credentials != null {
    let token_present = ($credentials | get --optional token | is-not-empty)

    if $token_present {
      let token_path = $"($SECRETS_PATH)/($config.path)/token"
      if ($token_path | path exists) {
        let token = (open $token_path | str trim)
        $repo = $"($parsed.scheme)://git:($token)@($parsed.host)($parsed.path)"
      }
    }

    let username_present = ($credentials | get --optional username | is-not-empty)
    let password_present = ($credentials | get --optional password | is-not-empty)

    if $username_present and $password_present {
      let username_path = $"($SECRETS_PATH)/($config.path)/username"
      let password_path = $"($SECRETS_PATH)/($config.path)/password"

      if ($username_path | path exists) and ($password_path | path exists) {
        let username = (open $username_path | str trim)
        let password = (open $password_path | str trim)
        $repo = $"($parsed.scheme)://($username):($password)@($parsed.host)($parsed.path)"
      }
    }
  }
  let dir = ($query | get --optional dir | default "")
  let ref = ($query | get --optional ref | default "")

  git clone $repo $tmp_dir

  if ($ref != "") {
    cd $tmp_dir
    git checkout $ref
  }

  let source_dir = if ($dir != "") {
    $tmp_dir | path join $dir
  } else {
    $tmp_dir
  }

  cp -r $source_dir $path

  # Validate that script directories contain mod.nu files
  try {
    let script_dirs = (glob $"($path)/*" | where {|p| ($p | path type) == "dir" })
    $script_dirs | each {|dir|
      let mod_nu = ($dir | path join "mod.nu")
      if not ($mod_nu | path exists) {
        print $"Warning: Script directory ($dir) does not contain mod.nu"
      }
    }
  } catch {
    print $"Warning: Could not validate script directories in ($path)"
  }
}

def main [] {
  try {
    let config_files = glob $"($CONFIG_PATH)/sources/**/*.yaml"
    let config_data = $config_files | each {|file|
      try {
        open $file
      } catch {
        print $"Warning: Could not parse config file ($file)"
        null
      }
    } | where { $in != null }

    $config_data | each {|config|
      try {
        fetch_source $config
      } catch {|err|
        print $"Error processing config: ($err.msg)"
      }
    }
  } catch {|err|
    print $"Error in main: ($err.msg)"
  }
}
