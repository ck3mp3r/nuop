---
name: Release

on:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ck3mp3r/nuop

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/create-github-app-token@v2
        id: token
        with:
          app-id: ${{ secrets.BOT_ID }}
          private-key: ${{ secrets.BOT }}

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          token: ${{ steps.token.outputs.token }}
          fetch-depth: 0

      - name: Get current Cargo.toml version
        id: cargo_version
        run: |
          CARGO_VERSION=$(grep '^version = ' operator/Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$CARGO_VERSION" >> $GITHUB_OUTPUT

      - name: Calculate next version
        id: semver
        uses: ck3mp3r/actions/semver-version@main
        with:
          current-version: ${{ steps.cargo_version.outputs.version }}

      - name: Determine version and branch strategy
        id: new_version
        run: |
          CARGO_VERSION="${{ steps.cargo_version.outputs.version }}"
          CALCULATED_VERSION="${{ steps.semver.outputs.semver }}"

          echo "Cargo.toml version: $CARGO_VERSION"
          echo "Calculated version: $CALCULATED_VERSION"

          if [ "$CARGO_VERSION" = "$CALCULATED_VERSION" ]; then
            # Version hasn't changed, no branch needed
            echo "Using existing version: $CARGO_VERSION"
            NEW_VERSION="$CARGO_VERSION"
            NEEDS_BRANCH="false"
          else
            # Version changed, need branch for update
            echo "Version will be updated to: $CALCULATED_VERSION"
            NEW_VERSION="$CALCULATED_VERSION"
            NEEDS_BRANCH="true"
          fi

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "needs_branch=$NEEDS_BRANCH" >> $GITHUB_OUTPUT

      - name: Create release branch
        if: steps.new_version.outputs.needs_branch == 'true'
        run: |
          BRANCH_NAME="release/v${{ steps.new_version.outputs.version }}"
          git checkout -b $BRANCH_NAME
          echo "RELEASE_BRANCH=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Update Cargo.toml version
        if: steps.new_version.outputs.needs_branch == 'true'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          echo "Updating Cargo.toml to $NEW_VERSION"
          sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" operator/Cargo.toml

      - name: Commit version bump
        if: steps.new_version.outputs.needs_branch == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add operator/Cargo.toml
          git commit -m "chore: bump version to ${{ steps.new_version.outputs.version }}"

      - name: Push release branch
        if: steps.new_version.outputs.needs_branch == 'true'
        run: |
          git push origin ${{ env.RELEASE_BRANCH }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v6
        with:
          context: ./operator
          file: ./operator/docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.new_version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Generating changelog from $PREVIOUS_TAG to HEAD"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" ${PREVIOUS_TAG}..HEAD)
          else
            echo "No previous tag found, generating changelog from first commit"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" HEAD)
          fi

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.new_version.outputs.version }}
          name: Release v${{ steps.new_version.outputs.version }}
          body: |
            ## Release v${{ steps.new_version.outputs.version }}

            ### Changes
            ${{ steps.changelog.outputs.changelog }}

            ### Docker Images
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.new_version.outputs.version }}`
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`

            ### Supported Architectures
            - linux/amd64
            - linux/arm64

            ðŸ¤– Generated with [Claude Code](https://claude.ai/code)
          draft: false
          prerelease: false
          target_commitish: ${{ env.RELEASE_BRANCH || github.ref }}

      - name: Merge release branch back to main
        if: steps.new_version.outputs.needs_branch == 'true'
        run: |
          git checkout main
          git merge --no-ff ${{ env.RELEASE_BRANCH }} -m "Release v${{ steps.new_version.outputs.version }}"
          git push origin main
          git push origin --delete ${{ env.RELEASE_BRANCH }}
